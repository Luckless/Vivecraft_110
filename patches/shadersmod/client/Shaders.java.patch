--- a/shadersmod/client/Shaders.java
+++ b/shadersmod/client/Shaders.java
@@ -57,6 +57,7 @@
 import net.minecraft.util.text.TextComponentString;
 import net.minecraft.world.World;
 import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.ARBFragmentShader;
 import org.lwjgl.opengl.ARBShaderObjects;
 import org.lwjgl.opengl.ARBVertexShader;
 import org.lwjgl.opengl.ContextCapabilities;
@@ -1618,8 +1619,9 @@
             needResetModels = false;
             SMCLog.info("Reset model renderers");
 
-            for (Render render : mc.getRenderManager().getEntityRenderMap().values())
+            for (Object r : mc.getRenderManager().getEntityRenderMap().values())
             {
+            	Render render = (Render) r;
                 if (render instanceof RenderLiving)
                 {
                     RenderLiving renderliving = (RenderLiving)render;
@@ -2894,8 +2896,8 @@
 
     private static void resize()
     {
-        renderDisplayWidth = mc.displayWidth;
-        renderDisplayHeight = mc.displayHeight;
+        renderDisplayWidth = mc.displayFBWidth;
+        renderDisplayHeight = mc.displayFBHeight;
         renderWidth = Math.round((float)renderDisplayWidth * configRenderResMul);
         renderHeight = Math.round((float)renderDisplayHeight * configRenderResMul);
         setupFrameBuffer();
@@ -2936,10 +2938,12 @@
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL14.GL_DEPTH_TEXTURE_MODE, GL11.GL_LUMINANCE);
-            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, renderWidth, renderHeight, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, (FloatBuffer)((FloatBuffer)null));
+            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL30.GL_DEPTH24_STENCIL8, renderWidth, renderHeight, 0, GL30.GL_DEPTH_STENCIL, GL30.GL_UNSIGNED_INT_24_8, (FloatBuffer)((FloatBuffer)null));
+            //VIVECRAFT ADD STENCIL
         }
-
-        EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, dfbDepthTextures.get(0), 0);
+        
+        //VIVECRAFT ADD STENCIL
+        EXTFramebufferObject.glFramebufferTexture2DEXT(36160, GL30.GL_DEPTH_STENCIL_ATTACHMENT, 3553, dfbDepthTextures.get(0), 0);
         GL20.glDrawBuffers(dfbDrawBuffers);
         GL11.glReadBuffer(0);
         checkGLError("FT d");
@@ -3100,7 +3104,7 @@
             }
         }
 
-        if (mc.displayWidth != renderDisplayWidth || mc.displayHeight != renderDisplayHeight)
+        if (mc.displayFBWidth != renderDisplayWidth || mc.displayFBHeight != renderDisplayHeight)
         {
             resize();
         }
@@ -3247,13 +3251,11 @@
     {
         if (currentWorld != world)
         {
-            World world = currentWorld;
-            currentWorld = world;
-
-            if (world != null && world != null)
+ 
+            if (world != null && currentWorld != null)
             {
                 int i = world.provider.getDimensionType().getId();
-                int j = world.provider.getDimensionType().getId();
+                int j = currentWorld.provider.getDimensionType().getId();
                 boolean flag = shaderPackDimensions.contains(Integer.valueOf(i));
                 boolean flag1 = shaderPackDimensions.contains(Integer.valueOf(j));
 
@@ -3262,6 +3264,7 @@
                     uninit();
                 }
             }
+            currentWorld = world;
         }
     }
 
@@ -3650,7 +3653,7 @@
             isRenderingDfb = false;
             mc.getFramebuffer().bindFramebuffer(true);
             OpenGlHelper.glFramebufferTexture2D(OpenGlHelper.GL_FRAMEBUFFER, OpenGlHelper.GL_COLOR_ATTACHMENT0, 3553, mc.getFramebuffer().framebufferTexture, 0);
-            GL11.glViewport(0, 0, mc.displayWidth, mc.displayHeight);
+            GL11.glViewport(0, 0, mc.displayFBWidth, mc.displayFBHeight);
 
             if (EntityRenderer.anaglyphEnable)
             {
@@ -4217,7 +4220,6 @@
     public static void setFog(GlStateManager.FogMode fogMode)
     {
         GlStateManager.setFog(fogMode);
-        fogMode = fogMode.capabilityId;
 
         if (fogEnabled)
         {
@@ -4382,8 +4384,9 @@
                         Lang.loadLocaleData(inputstream, properties);
                         inputstream.close();
 
-                        for (String s4 : properties.keySet())
+                        for (Object s7 : properties.keySet())
                         {
+                        	String s4 = (String)s7;
                             String s5 = properties.getProperty(s4);
                             shaderPackResources.put(s4, s5);
                         }
