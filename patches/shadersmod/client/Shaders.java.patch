--- a/shadersmod/client/Shaders.java
+++ b/shadersmod/client/Shaders.java
@@ -1231,11 +1231,10 @@
         SMCLog.info(stringbuilder.toString());
     }
 
-    public static void startup(Minecraft mc)
+    public static void startup(Minecraft mcin)
     {
         checkShadersModInstalled();
-        mc = mc;
-        mc = Minecraft.getMinecraft();
+        mc = mcin;
         capabilities = GLContext.getCapabilities();
         glVersionString = GL11.glGetString(GL11.GL_VERSION);
         glVendorString = GL11.glGetString(GL11.GL_VENDOR);
@@ -2896,8 +2895,8 @@
 
     private static void resize()
     {
-        renderDisplayWidth = mc.displayWidth;
-        renderDisplayHeight = mc.displayHeight;
+        renderDisplayWidth = mc.displayFBWidth;
+        renderDisplayHeight = mc.displayFBHeight;
         renderWidth = Math.round((float)renderDisplayWidth * configRenderResMul);
         renderHeight = Math.round((float)renderDisplayHeight * configRenderResMul);
         setupFrameBuffer();
@@ -2938,10 +2937,12 @@
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL14.GL_DEPTH_TEXTURE_MODE, GL11.GL_LUMINANCE);
-            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, renderWidth, renderHeight, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, (FloatBuffer)((FloatBuffer)null));
+            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL30.GL_DEPTH24_STENCIL8, renderWidth, renderHeight, 0, GL30.GL_DEPTH_STENCIL, GL30.GL_UNSIGNED_INT_24_8, (FloatBuffer)((FloatBuffer)null));
+            //VIVECRAFT ADD STENCIL
         }
-
-        EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, dfbDepthTextures.get(0), 0);
+        
+        //VIVECRAFT ADD STENCIL
+        EXTFramebufferObject.glFramebufferTexture2DEXT(36160, GL30.GL_DEPTH_STENCIL_ATTACHMENT, 3553, dfbDepthTextures.get(0), 0);
         GL20.glDrawBuffers(dfbDrawBuffers);
         GL11.glReadBuffer(0);
         checkGLError("FT d");
@@ -3102,7 +3103,7 @@
             }
         }
 
-        if (mc.displayWidth != renderDisplayWidth || mc.displayHeight != renderDisplayHeight)
+        if (mc.displayFBWidth != renderDisplayWidth || mc.displayFBHeight != renderDisplayHeight)
         {
             resize();
         }
@@ -3245,16 +3246,15 @@
         checkGLError("end beginRender");
     }
 
-    private static void checkWorldChanged(World worldin)
+    private static void checkWorldChanged(World world)
     {
-        if (currentWorld != worldin)
+        if (currentWorld != world)
         {
-            currentWorld = worldin;
-
-            if (currentWorld != null && worldin != null)
+ 
+            if (world != null && currentWorld != null)
             {
-                int i = worldin.provider.getDimensionType().getId();
-                int j = worldin.provider.getDimensionType().getId();
+                int i = world.provider.getDimensionType().getId();
+                int j = currentWorld.provider.getDimensionType().getId();
                 boolean flag = shaderPackDimensions.contains(Integer.valueOf(i));
                 boolean flag1 = shaderPackDimensions.contains(Integer.valueOf(j));
 
@@ -3263,6 +3263,7 @@
                     uninit();
                 }
             }
+            currentWorld = world;
         }
     }
 
@@ -3651,7 +3652,7 @@
             isRenderingDfb = false;
             mc.getFramebuffer().bindFramebuffer(true);
             OpenGlHelper.glFramebufferTexture2D(OpenGlHelper.GL_FRAMEBUFFER, OpenGlHelper.GL_COLOR_ATTACHMENT0, 3553, mc.getFramebuffer().framebufferTexture, 0);
-            GL11.glViewport(0, 0, mc.displayWidth, mc.displayHeight);
+            GL11.glViewport(0, 0, mc.displayFBWidth, mc.displayFBHeight);
 
             if (EntityRenderer.anaglyphEnable)
             {
@@ -4384,7 +4385,7 @@
 
                         for (Object s7 : properties.keySet())
                         {
-                        	String s4 = (String) s7;
+                        	String s4 = (String)s7;
                             String s5 = properties.getProperty(s4);
                             shaderPackResources.put(s4, s5);
                         }
