--- a/net/minecraft/client/renderer/ItemRenderer.java
+++ b/net/minecraft/client/renderer/ItemRenderer.java
@@ -1,5 +1,11 @@
 package net.minecraft.client.renderer;
 
+
+import com.mtbs3d.minecrift.render.OpenGLdebugging;
+
+import de.fruitfly.ovr.structs.Matrix4f;
+import de.fruitfly.ovr.structs.Vector3f;
+
 import com.google.common.base.Objects;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
@@ -19,8 +25,13 @@
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Items;
 import net.minecraft.item.Item;
+import net.minecraft.item.ItemArrow;
+import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemMap;
+import net.minecraft.item.ItemShield;
 import net.minecraft.item.ItemStack;
+import net.minecraft.item.ItemSword;
+import net.minecraft.item.ItemTool;
 import net.minecraft.src.Config;
 import net.minecraft.src.DynamicLights;
 import net.minecraft.src.Reflector;
@@ -49,7 +60,7 @@
     private float prevEquippedProgressOffHand;
     private final RenderManager renderManager;
     private final RenderItem itemRenderer;
-
+    
     public ItemRenderer(Minecraft mcIn)
     {
         this.mc = mcIn;
@@ -59,29 +70,29 @@
 
     public void renderItem(EntityLivingBase entityIn, ItemStack heldStack, ItemCameraTransforms.TransformType transform)
     {
-        this.renderItemSide(entityIn, heldStack, transform, false);
+        this.renderItemSide(0 ,entityIn, heldStack, transform, false);
     }
 
-    public void renderItemSide(EntityLivingBase entitylivingbaseIn, ItemStack heldStack, ItemCameraTransforms.TransformType transform, boolean p_187462_4_)
+    public void renderItemSide(float par1, EntityLivingBase entitylivingbaseIn, ItemStack heldStack, ItemCameraTransforms.TransformType transform, boolean rightSide)
     {
         if (heldStack != null)
         {
             Item item = heldStack.getItem();
             Block block = Block.getBlockFromItem(item);
             GlStateManager.pushMatrix();
-            boolean flag = this.itemRenderer.shouldRenderItemIn3D(heldStack) && this.isBlockTranslucent(block);
-
-            if (flag)
-            {
-                GlStateManager.depthMask(false);
-            }
-
-            this.itemRenderer.renderItem(heldStack, entitylivingbaseIn, transform, p_187462_4_);
-
-            if (flag)
-            {
-                GlStateManager.depthMask(true);
-            }
+	            boolean is3D = this.itemRenderer.shouldRenderItemIn3D(heldStack) && this.isBlockTranslucent(block);
+	
+	            if (is3D)
+	            {
+	                GlStateManager.depthMask(false);
+	            }
+	
+	            this.itemRenderer.renderItem(par1, heldStack, entitylivingbaseIn, transform, rightSide);
+	
+	            if (is3D)
+	            {
+	                GlStateManager.depthMask(true);
+	            }
 
             GlStateManager.popMatrix();
         }
@@ -107,7 +118,7 @@
         GlStateManager.popMatrix();
     }
 
-    private void setLightmap()
+    void setLightmap()
     {
         AbstractClientPlayer abstractclientplayer = this.mc.thePlayer;
         int i = this.mc.theWorld.getCombinedLight(new BlockPos(abstractclientplayer.posX, abstractclientplayer.posY + (double)abstractclientplayer.getEyeHeight(), abstractclientplayer.posZ), 0);
@@ -122,6 +133,7 @@
         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, f, f1);
     }
 
+    //unused
     private void rotateArm(float p_187458_1_)
     {
         EntityPlayerSP entityplayersp = this.mc.thePlayer;
@@ -142,6 +154,7 @@
         return f;
     }
 
+    //for map only
     private void renderArms()
     {
         if (!this.mc.thePlayer.isInvisible())
@@ -156,6 +169,7 @@
         }
     }
 
+    //for map only
     private void renderArm(EnumHandSide p_187455_1_)
     {
         this.mc.getTextureManager().bindTexture(this.mc.thePlayer.getLocationSkin());
@@ -250,46 +264,57 @@
         GlStateManager.enableLighting();
     }
 
-    private void renderArmFirstPerson(float p_187456_1_, float p_187456_2_, EnumHandSide p_187456_3_)
-    {
-        boolean flag = p_187456_3_ != EnumHandSide.LEFT;
+    private void renderArmFirstPerson(float equipProgress, float swingProgress, EnumHandSide side)
+    { //render arm
+    	
+        boolean flag = side != EnumHandSide.LEFT;       
         float f = flag ? 1.0F : -1.0F;
-        float f1 = MathHelper.sqrt_float(p_187456_2_);
-        float f2 = -0.3F * MathHelper.sin(f1 * (float)Math.PI);
-        float f3 = 0.4F * MathHelper.sin(f1 * ((float)Math.PI * 2F));
-        float f4 = -0.4F * MathHelper.sin(p_187456_2_ * (float)Math.PI);
-        GlStateManager.translate(f * (f2 + 0.64000005F), f3 + -0.6F + p_187456_1_ * -0.6F, f4 + -0.71999997F);
-        GlStateManager.rotate(f * 45.0F, 0.0F, 1.0F, 0.0F);
-        float f5 = MathHelper.sin(p_187456_2_ * p_187456_2_ * (float)Math.PI);
-        float f6 = MathHelper.sin(f1 * (float)Math.PI);
-        GlStateManager.rotate(f * f6 * 70.0F, 0.0F, 1.0F, 0.0F);
-        GlStateManager.rotate(f * f5 * -20.0F, 0.0F, 0.0F, 1.0F);
         AbstractClientPlayer abstractclientplayer = this.mc.thePlayer;
         this.mc.getTextureManager().bindTexture(abstractclientplayer.getLocationSkin());
-        GlStateManager.translate(f * -1.0F, 3.6F, 3.5F);
-        GlStateManager.rotate(f * 120.0F, 0.0F, 0.0F, 1.0F);
-        GlStateManager.rotate(200.0F, 1.0F, 0.0F, 0.0F);
-        GlStateManager.rotate(f * -135.0F, 0.0F, 1.0F, 0.0F);
-        GlStateManager.translate(f * 5.6F, 0.0F, 0.0F);
-        RenderPlayer renderplayer = (RenderPlayer)this.renderManager.getEntityRenderObject(abstractclientplayer);
-        GlStateManager.disableCull();
-
-        if (flag)
-        {
-            renderplayer.renderRightArm(abstractclientplayer);
-        }
-        else
-        {
-            renderplayer.renderLeftArm(abstractclientplayer);
-        }
-
+        
+//        float f1 = MathHelper.sqrt_float(swingProgress);
+//        float f2 = -0.3F * MathHelper.sin(f1 * (float)Math.PI);
+//        float f3 = 0.4F * MathHelper.sin(f1 * ((float)Math.PI * 2F));
+//        float f4 = -0.4F * MathHelper.sin(swingProgress * (float)Math.PI);
+//        GlStateManager.translate(f * (f2 + 0.64000005F), f3 + -0.6F + equipProgress * -0.6F, f4 + -0.71999997F);
+//        GlStateManager.rotate(f * 45.0F, 0.0F, 1.0F, 0.0F);
+//        float f5 = MathHelper.sin(swingProgress * swingProgress * (float)Math.PI);
+//        float f6 = MathHelper.sin(f1 * (float)Math.PI);
+//        GlStateManager.rotate(f * f6 * 70.0F, 0.0F, 1.0F, 0.0F);
+//        GlStateManager.rotate(f * f5 * -20.0F, 0.0F, 0.0F, 1.0F);
+//        GlStateManager.translate(f * -1.0F, 3.6F, 3.5F);
+//        GlStateManager.rotate(f * 120.0F, 0.0F, 0.0F, 1.0F);
+//        GlStateManager.rotate(200.0F, 1.0F, 0.0F, 0.0F);
+//        GlStateManager.rotate(f * -135.0F, 0.0F, 1.0F, 0.0F);
+//        GlStateManager.translate(f * 5.6F, 0.0F, 0.0F);
+     //VIVE this is all thats needed to align hands with controllers. 
+        //TODO: Animation.
+        GlStateManager.pushMatrix();
+        	GlStateManager.scale(0.4f, 0.4F, 0.4F);
+        	GlStateManager.translate(-0.36*-f, 0, .83);
+	        GlStateManager.rotate(-90, 1, 0,0);
+	
+	  
+	        RenderPlayer renderplayer = (RenderPlayer)this.renderManager.getEntityRenderObject(abstractclientplayer);
+	        GlStateManager.disableCull();
+	
+	        if (flag)
+	        {
+	            renderplayer.renderRightArm(abstractclientplayer);
+	        }
+	        else
+	        {
+	            renderplayer.renderLeftArm(abstractclientplayer);
+	        }
+        GlStateManager.popMatrix();
         GlStateManager.enableCull();
     }
-
-    private void transformEatFirstPerson(float p_187454_1_, EnumHandSide p_187454_2_, ItemStack p_187454_3_)
+    
+  //was transformEatFirstPerson
+    private void doEatAnimation(float progress, EnumHandSide side, ItemStack item)
     {
-        float f = (float)this.mc.thePlayer.getItemInUseCount() - p_187454_1_ + 1.0F;
-        float f1 = f / (float)p_187454_3_.getMaxItemUseDuration();
+        float f = (float)this.mc.thePlayer.getItemInUseCount() - progress + 1.0F;
+        float f1 = f / (float)item.getMaxItemUseDuration();
 
         if (f1 < 0.8F)
         {
@@ -298,52 +323,58 @@
         }
 
         float f3 = 1.0F - (float)Math.pow((double)f1, 27.0D);
-        int i = p_187454_2_ == EnumHandSide.RIGHT ? 1 : -1;
+        int i = side == EnumHandSide.RIGHT ? 1 : -1;
         GlStateManager.translate(f3 * 0.6F * (float)i, f3 * -0.5F, f3 * 0.0F);
         GlStateManager.rotate((float)i * f3 * 90.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(f3 * 10.0F, 1.0F, 0.0F, 0.0F);
         GlStateManager.rotate((float)i * f3 * 30.0F, 0.0F, 0.0F, 1.0F);
     }
 
-    private void transformFirstPerson(EnumHandSide p_187453_1_, float p_187453_2_)
-    {
-        int i = p_187453_1_ == EnumHandSide.RIGHT ? 1 : -1;
-        float f = MathHelper.sin(p_187453_2_ * p_187453_2_ * (float)Math.PI);
-        GlStateManager.rotate((float)i * (45.0F + f * -20.0F), 0.0F, 1.0F, 0.0F);
-        float f1 = MathHelper.sin(MathHelper.sqrt_float(p_187453_2_) * (float)Math.PI);
-        GlStateManager.rotate((float)i * f1 * -20.0F, 0.0F, 0.0F, 1.0F);
-        GlStateManager.rotate(f1 * -80.0F, 1.0F, 0.0F, 0.0F);
-        GlStateManager.rotate((float)i * -45.0F, 0.0F, 1.0F, 0.0F);
-    }
-
-    private void transformSideFirstPerson(EnumHandSide p_187459_1_, float p_187459_2_)
+    //was transformFirstPerson
+    private void doSwingItemAnimation(EnumHandSide side, float swingprogress)
     {
-        int i = p_187459_1_ == EnumHandSide.RIGHT ? 1 : -1;
-        GlStateManager.translate((float)i * 0.56F, -0.52F + p_187459_2_ * -0.6F, -0.72F);
+    	//VIVE TODO: SOMETHING
+//        int i = side == EnumHandSide.RIGHT ? 1 : -1;
+//        float f = MathHelper.sin(swingprogress * swingprogress * (float)Math.PI);
+//        GlStateManager.rotate((float)i * (45.0F + f * -20.0F), 0.0F, 1.0F, 0.0F);
+//        float f1 = MathHelper.sin(MathHelper.sqrt_float(swingprogress) * (float)Math.PI);
+//        GlStateManager.rotate((float)i * f1 * -20.0F, 0.0F, 0.0F, 1.0F);
+//        GlStateManager.rotate(f1 * -80.0F, 1.0F, 0.0F, 0.0F);
+//        GlStateManager.rotate((float)i * -45.0F, 0.0F, 1.0F, 0.0F);
+    }
+    
+    //was transformSideFirstPerson
+    private void doEquipItemAnimation(EnumHandSide side, float equippingprogress)
+    {
+    	//VIVE NOOP
+//        int i = side == EnumHandSide.RIGHT ? 1 : -1;
+//        GlStateManager.translate((float)i * 0.56F, -0.52F + equippingprogress * -0.6F, -0.72F);
     }
 
     /**
      * Renders the active item in the player's hand when in first person mode.
      */
+    
+    //VIVE have to skip this method, go straight to each hand
     public void renderItemInFirstPerson(float partialTicks)
     {
-        AbstractClientPlayer abstractclientplayer = this.mc.thePlayer;
-        float f = abstractclientplayer.getSwingProgress(partialTicks);
-        EnumHand enumhand = (EnumHand)Objects.firstNonNull(abstractclientplayer.swingingHand, EnumHand.MAIN_HAND);
-        float f1 = abstractclientplayer.prevRotationPitch + (abstractclientplayer.rotationPitch - abstractclientplayer.prevRotationPitch) * partialTicks;
-        float f2 = abstractclientplayer.prevRotationYaw + (abstractclientplayer.rotationYaw - abstractclientplayer.prevRotationYaw) * partialTicks;
-        boolean flag = true;
-        boolean flag1 = true;
+        AbstractClientPlayer player = this.mc.thePlayer;
+        float swingprogress = player.getSwingProgress(partialTicks);
+        EnumHand hand = (EnumHand)Objects.firstNonNull(player.swingingHand, EnumHand.MAIN_HAND);
+        float f1 = player.prevRotationPitch + (player.rotationPitch - player.prevRotationPitch) * partialTicks;
+        float f2 = player.prevRotationYaw + (player.rotationYaw - player.prevRotationYaw) * partialTicks;
+        boolean doRighthand = true;
+        boolean doLeftHand = true;
 
-        if (abstractclientplayer.isHandActive())
+        if (player.isHandActive())
         {
-            ItemStack itemstack = abstractclientplayer.getActiveItemStack();
+            ItemStack itemstack = player.getActiveItemStack();
 
             if (itemstack != null && itemstack.getItem() == Items.BOW)
-            {
-                EnumHand enumhand1 = abstractclientplayer.getActiveHand();
-                flag = enumhand1 == EnumHand.MAIN_HAND;
-                flag1 = !flag;
+            {//bow mode
+                EnumHand enumhand1 = player.getActiveHand();
+                doRighthand = enumhand1 == EnumHand.MAIN_HAND;
+                doLeftHand = !doRighthand;
             }
         }
 
@@ -352,117 +383,177 @@
         this.rotateArm(partialTicks);
         GlStateManager.enableRescaleNormal();
 
-        if (flag)
+        if (doRighthand)
         {
-            float f3 = enumhand == EnumHand.MAIN_HAND ? f : 0.0F;
+            float f3 = hand == EnumHand.MAIN_HAND ? swingprogress : 0.0F;
             float f5 = 1.0F - (this.prevEquippedProgressMainHand + (this.equippedProgressMainHand - this.prevEquippedProgressMainHand) * partialTicks);
-            this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.MAIN_HAND, f3, this.itemStackMainHand, f5);
+            this.renderItemInFirstPerson(player, partialTicks, f1, EnumHand.MAIN_HAND, f3, this.itemStackMainHand, f5);
         }
 
-        if (flag1)
+        if (doLeftHand)
         {
-            float f4 = enumhand == EnumHand.OFF_HAND ? f : 0.0F;
+            float f4 = hand == EnumHand.OFF_HAND ? swingprogress : 0.0F;
             float f6 = 1.0F - (this.prevEquippedProgressOffHand + (this.equippedProgressOffHand - this.prevEquippedProgressOffHand) * partialTicks);
-            this.renderItemInFirstPerson(abstractclientplayer, partialTicks, f1, EnumHand.OFF_HAND, f4, this.itemStackOffHand, f6);
+            this.renderItemInFirstPerson(player, partialTicks, f1, EnumHand.OFF_HAND, f4, this.itemStackOffHand, f6);
         }
 
         GlStateManager.disableRescaleNormal();
         RenderHelper.disableStandardItemLighting();
     }
 
-    public void renderItemInFirstPerson(AbstractClientPlayer p_187457_1_, float p_187457_2_, float p_187457_3_, EnumHand p_187457_4_, float p_187457_5_, @Nullable ItemStack p_187457_6_, float p_187457_7_)
+    public void renderItemInFirstPerson(AbstractClientPlayer player, float partialTicks, float bodyPitch, EnumHand hand, float swingProgress, @Nullable ItemStack itemstack, float equippingprogress)
     {
-        boolean flag = p_187457_4_ == EnumHand.MAIN_HAND;
-        EnumHandSide enumhandside = flag ? p_187457_1_.getPrimaryHand() : p_187457_1_.getPrimaryHand().opposite();
-        GlStateManager.pushMatrix();
-
-        if (p_187457_6_ == null)
-        {
-            if (flag && !p_187457_1_.isInvisible())
-            {
-                this.renderArmFirstPerson(p_187457_7_, p_187457_5_, enumhandside);
-            }
-        }
-        else if (p_187457_6_.getItem() instanceof ItemMap)
-        {
-            if (flag && this.itemStackOffHand == null)
-            {
-                this.renderMapFirstPerson(p_187457_3_, p_187457_7_, p_187457_5_);
-            }
-            else
-            {
-                this.renderMapFirstPersonSide(p_187457_7_, enumhandside, p_187457_5_, p_187457_6_);
-            }
-        }
-        else
-        {
-            boolean flag1 = enumhandside == EnumHandSide.RIGHT;
-
-            if (p_187457_1_.isHandActive() && p_187457_1_.getItemInUseCount() > 0 && p_187457_1_.getActiveHand() == p_187457_4_)
-            {
-                int j = flag1 ? 1 : -1;
-
-                switch (p_187457_6_.getItemUseAction())
-                {
-                    case NONE:
-                        this.transformSideFirstPerson(enumhandside, p_187457_7_);
-                        break;
-
-                    case EAT:
-                    case DRINK:
-                        this.transformEatFirstPerson(p_187457_2_, enumhandside, p_187457_6_);
-                        this.transformSideFirstPerson(enumhandside, p_187457_7_);
-                        break;
-
-                    case BLOCK:
-                        this.transformSideFirstPerson(enumhandside, p_187457_7_);
-                        break;
-
-                    case BOW:
-                        this.transformSideFirstPerson(enumhandside, p_187457_7_);
-                        GlStateManager.translate((float)j * -0.2785682F, 0.18344387F, 0.15731531F);
-                        GlStateManager.rotate(-13.935F, 1.0F, 0.0F, 0.0F);
-                        GlStateManager.rotate((float)j * 35.3F, 0.0F, 1.0F, 0.0F);
-                        GlStateManager.rotate((float)j * -9.785F, 0.0F, 0.0F, 1.0F);
-                        float f5 = (float)p_187457_6_.getMaxItemUseDuration() - ((float)this.mc.thePlayer.getItemInUseCount() - p_187457_2_ + 1.0F);
-                        float f6 = f5 / 20.0F;
-                        f6 = (f6 * f6 + f6 * 2.0F) / 3.0F;
-
-                        if (f6 > 1.0F)
-                        {
-                            f6 = 1.0F;
-                        }
-
-                        if (f6 > 0.1F)
-                        {
-                            float f7 = MathHelper.sin((f5 - 0.1F) * 1.3F);
-                            float f3 = f6 - 0.1F;
-                            float f4 = f7 * f3;
-                            GlStateManager.translate(f4 * 0.0F, f4 * 0.004F, f4 * 0.0F);
-                        }
-
-                        GlStateManager.translate(f6 * 0.0F, f6 * 0.0F, f6 * 0.04F);
-                        GlStateManager.scale(1.0F, 1.0F, 1.0F + f6 * 0.2F);
-                        GlStateManager.rotate((float)j * 45.0F, 0.0F, -1.0F, 0.0F);
-                }
-            }
-            else
-            {
-                float f = -0.4F * MathHelper.sin(MathHelper.sqrt_float(p_187457_5_) * (float)Math.PI);
-                float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt_float(p_187457_5_) * ((float)Math.PI * 2F));
-                float f2 = -0.2F * MathHelper.sin(p_187457_5_ * (float)Math.PI);
-                int i = flag1 ? 1 : -1;
-                GlStateManager.translate((float)i * f, f1, f2);
-                this.transformSideFirstPerson(enumhandside, p_187457_7_);
-                this.transformFirstPerson(enumhandside, p_187457_5_);
-            }
-
-            this.renderItemSide(p_187457_1_, p_187457_6_, flag1 ? ItemCameraTransforms.TransformType.FIRST_PERSON_RIGHT_HAND : ItemCameraTransforms.TransformType.FIRST_PERSON_LEFT_HAND, !flag1);
-        }
-
-        GlStateManager.popMatrix();
+    	boolean mainHand = hand == EnumHand.MAIN_HAND;
+    	EnumHandSide enumhandside = mainHand ? player.getPrimaryHand() : player.getPrimaryHand().opposite();
+    	GlStateManager.pushMatrix();
+	    	//VIVE
+	    	//        if (itemstack == null)
+	    	//        {
+	    	//            if (mainHand && !player.isInvisible())
+	    	//            {
+	    	//                this.renderArmFirstPerson(equippingprogress, swingProgress, enumhandside);
+	    	//            }
+	    	//        }
+	
+	    	if (!player.isInvisible())
+	    	{
+	    		this.renderArmFirstPerson(equippingprogress, swingProgress, enumhandside);
+	    	}
+	
+    	
+	    	if(itemstack!=null){
+	    		
+				boolean thing = false;
+	    		
+	    		if (itemstack.getItem() instanceof ItemMap)
+	    		{
+	    			if (mainHand && this.itemStackOffHand == null)
+	    			{
+	    				this.renderMapFirstPerson(bodyPitch, equippingprogress, swingProgress);
+	    			}
+	    			else
+	    			{
+	    				this.renderMapFirstPersonSide(equippingprogress, enumhandside, swingProgress, itemstack);
+	    			}
+	    		}
+	    		else
+	    		{
+	    			boolean rightSide = enumhandside == EnumHandSide.RIGHT;
+	
+	    			if (player.isHandActive() && player.getItemInUseCount() > 0 && player.getActiveHand() == hand)
+	    			{ //using animations
+	    				int j = rightSide ? 1 : -1;
+	
+	    				switch (itemstack.getItemUseAction())
+	    				{
+	    				case NONE:
+	    					this.doEquipItemAnimation(enumhandside, equippingprogress);
+	    					break;
+	
+	    				case EAT:
+	    				case DRINK:
+	    					this.doEatAnimation(partialTicks, enumhandside, itemstack);
+	    					this.doEquipItemAnimation(enumhandside, equippingprogress);
+	    					break;
+	
+	    				case BLOCK:
+	    					GlStateManager.scale(1.5, 1.5, 1.5);
+	    					this.doEquipItemAnimation(enumhandside, equippingprogress);
+	    					break;
+	
+	    				case BOW:
+	    					this.doEquipItemAnimation(enumhandside, equippingprogress);
+	    					GlStateManager.translate((float)j * -0.2785682F, 0.18344387F, 0.15731531F);
+	    					GlStateManager.rotate(-13.935F, 1.0F, 0.0F, 0.0F);
+	    					GlStateManager.rotate((float)j * 35.3F, 0.0F, 1.0F, 0.0F);
+	    					GlStateManager.rotate((float)j * -9.785F, 0.0F, 0.0F, 1.0F);
+	    					float f5 = (float)itemstack.getMaxItemUseDuration() - ((float)this.mc.thePlayer.getItemInUseCount() - partialTicks + 1.0F);
+	    					float f6 = f5 / 20.0F;
+	    					f6 = (f6 * f6 + f6 * 2.0F) / 3.0F;
+	
+	    					if (f6 > 1.0F)
+	    					{
+	    						f6 = 1.0F;
+	    					}
+	
+	    					if (f6 > 0.1F)
+	    					{
+	    						float f7 = MathHelper.sin((f5 - 0.1F) * 1.3F);
+	    						float f3 = f6 - 0.1F;
+	    						float f4 = f7 * f3;
+	    						GlStateManager.translate(f4 * 0.0F, f4 * 0.004F, f4 * 0.0F);
+	    					}
+	
+	    					GlStateManager.translate(f6 * 0.0F, f6 * 0.0F, f6 * 0.04F);
+	    					GlStateManager.scale(1.0F, 1.0F, 1.0F + f6 * 0.2F);
+	    					GlStateManager.rotate((float)j * 45.0F, 0.0F, -1.0F, 0.0F);
+	    					break;
+	    				default:
+	    					break;
+	    				}
+	    			}
+	    	
+	    			{
+	    				float f = -0.4F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float)Math.PI);
+	    				float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * ((float)Math.PI * 2F));
+	    				float f2 = -0.2F * MathHelper.sin(swingProgress * (float)Math.PI);
+	    				int i = rightSide ? 1 : -1;
+	    				//GlStateManager.translate((float)i * f, f1, f2);
+	    				this.doEquipItemAnimation(enumhandside, equippingprogress);
+	    				this.doSwingItemAnimation(enumhandside, swingProgress);	
+	    				
+	    				//VIVE manually adjust items based on type... no other choice :(
+	    				
+	    		    				
+	    				Item item =  itemstack.getItem();
+	    				
+	    				if(item instanceof ItemBlock){
+	    					
+	    					if (this.itemRenderer.shouldRenderItemIn3D(itemstack)){
+	    						GlStateManager.translate(0f, 0f, -0.1f);	
+	    						GlStateManager.scale(0.2, 0.2, 0.2);
+	    					}else {
+		     					GlStateManager.translate(0f, 0f, -0.1f);		
+		    					GlStateManager.scale(0.3, 0.3, 0.3);
+		    					GlStateManager.rotate(-i*45.0F, 0.0F, 1.0F, 0.0F);   
+	    					}
+	
+	    				} 
+	    				else if(item instanceof ItemTool || item instanceof ItemSword || item instanceof ItemArrow)
+	    				{
+	    					GlStateManager.translate(0f, 0f, -0.2f);		
+	    					GlStateManager.scale(0.5, 0.5, 0.7);	
+	    					GlStateManager.rotate(-45F, 1.0F, 0.0F, 0.0F);
+	    					GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);    	
+	    				}
+	    				else if(item instanceof ItemShield){
+	    					GlStateManager.scale(0.5, 0.5, 0.5);
+	    					GlStateManager.rotate(i*90.0F, 0.0F, 1.0F, 0.0F);  
+	    					GlStateManager.translate(.5,0.5,.6);
+	    				}
+	    				else {
+	     					GlStateManager.translate(0f, 0f, -0.1f);		
+	    					GlStateManager.scale(0.3, 0.3, 0.3);
+	    					GlStateManager.rotate(-i*45.0F, 0.0F, 1.0F, 0.0F);   
+	    				}
+	    				z++;
+
+	    			}
+	    			
+	    			this.itemRenderer.ismainhand = mainHand;
+	    			
+	    			//VIVE use 'NONE' transforms.
+	    			if(!thing)
+	    				this.renderItemSide(partialTicks,player, itemstack, rightSide ? ItemCameraTransforms.TransformType.NONE : ItemCameraTransforms.TransformType.NONE, !rightSide);
+	    			else
+		    			this.renderItemSide(partialTicks,player, itemstack, rightSide ? ItemCameraTransforms.TransformType.THIRD_PERSON_RIGHT_HAND : ItemCameraTransforms.TransformType.THIRD_PERSON_LEFT_HAND, !rightSide);
+	    			
+	    			this.itemRenderer.ismainhand = false;
+	    		}
+	    	}
+    	GlStateManager.popMatrix();
     }
-
+int z = 0;
     /**
      * Renders the overlays.
      */
