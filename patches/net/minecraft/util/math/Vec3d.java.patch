--- a/net/minecraft/util/math/Vec3d.java
+++ b/net/minecraft/util/math/Vec3d.java
@@ -15,31 +15,31 @@
     /** Z coordinate of Vec3D */
     public final double zCoord;
 
-    public Vec3d(double p_i47092_1_, double p_i47092_3_, double p_i47092_5_)
+    public Vec3d(double x, double y, double z)
     {
-        if (p_i47092_1_ == -0.0D)
+        if (x == -0.0D)
         {
-            p_i47092_1_ = 0.0D;
+            x = 0.0D;
         }
 
-        if (p_i47092_3_ == -0.0D)
+        if (y == -0.0D)
         {
-            p_i47092_3_ = 0.0D;
+            y = 0.0D;
         }
 
-        if (p_i47092_5_ == -0.0D)
+        if (z == -0.0D)
         {
-            p_i47092_5_ = 0.0D;
+            z = 0.0D;
         }
 
-        this.xCoord = p_i47092_1_;
-        this.yCoord = p_i47092_3_;
-        this.zCoord = p_i47092_5_;
+        this.xCoord = x;
+        this.yCoord = y;
+        this.zCoord = z;
     }
 
-    public Vec3d(Vec3i p_i47093_1_)
+    public Vec3d(Vec3i block)
     {
-        this((double)p_i47093_1_.func_177958_n(), (double)p_i47093_1_.func_177956_o(), (double)p_i47093_1_.func_177952_p());
+        this((double)block.getX(), (double)block.getY(), (double)block.getZ());
     }
 
     /**
@@ -72,17 +72,17 @@
         return new Vec3d(this.yCoord * vec.zCoord - this.zCoord * vec.yCoord, this.zCoord * vec.xCoord - this.xCoord * vec.zCoord, this.xCoord * vec.yCoord - this.yCoord * vec.xCoord);
     }
 
-    public Vec3d func_178788_d(Vec3d p_178788_1_)
+    public Vec3d subtractVector(Vec3d p_178788_1_)
     {
-        return this.func_178786_a(p_178788_1_.xCoord, p_178788_1_.yCoord, p_178788_1_.zCoord);
+        return this.subtractVector(p_178788_1_.xCoord, p_178788_1_.yCoord, p_178788_1_.zCoord);
     }
 
-    public Vec3d func_178786_a(double p_178786_1_, double p_178786_3_, double p_178786_5_)
+    public Vec3d subtractVector(double p_178786_1_, double p_178786_3_, double p_178786_5_)
     {
         return this.addVector(-p_178786_1_, -p_178786_3_, -p_178786_5_);
     }
 
-    public Vec3d func_178787_e(Vec3d p_178787_1_)
+    public Vec3d addVector(Vec3d p_178787_1_)
     {
         return this.addVector(p_178787_1_.xCoord, p_178787_1_.yCoord, p_178787_1_.zCoord);
     }
@@ -118,7 +118,7 @@
         return d0 * d0 + d1 * d1 + d2 * d2;
     }
 
-    public double func_186679_c(double p_186679_1_, double p_186679_3_, double p_186679_5_)
+    public double squareDistanceTo(double p_186679_1_, double p_186679_3_, double p_186679_5_)
     {
         double d0 = p_186679_1_ - this.xCoord;
         double d1 = p_186679_3_ - this.yCoord;
@@ -126,7 +126,7 @@
         return d0 * d0 + d1 * d1 + d2 * d2;
     }
 
-    public Vec3d func_186678_a(double p_186678_1_)
+    public Vec3d multiply(double p_186678_1_)
     {
         return new Vec3d(this.xCoord * p_186678_1_, this.yCoord * p_186678_1_, this.zCoord * p_186678_1_);
     }
@@ -139,7 +139,7 @@
         return (double)MathHelper.sqrt_double(this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord);
     }
 
-    public double func_189985_c()
+    public double lengthSquared()
     {
         return this.xCoord * this.xCoord + this.yCoord * this.yCoord + this.zCoord * this.zCoord;
     }
@@ -246,7 +246,7 @@
         return "(" + this.xCoord + ", " + this.yCoord + ", " + this.zCoord + ")";
     }
 
-    public Vec3d func_178789_a(float p_178789_1_)
+    public Vec3d rotateX(float p_178789_1_)
     {
         float f = MathHelper.cos(p_178789_1_);
         float f1 = MathHelper.sin(p_178789_1_);
@@ -256,7 +256,7 @@
         return new Vec3d(d0, d1, d2);
     }
 
-    public Vec3d func_178785_b(float p_178785_1_)
+    public Vec3d rotateY(float p_178785_1_)
     {
         float f = MathHelper.cos(p_178785_1_);
         float f1 = MathHelper.sin(p_178785_1_);
@@ -266,17 +266,17 @@
         return new Vec3d(d0, d1, d2);
     }
 
-    public static Vec3d func_189984_a(Vec2f p_189984_0_)
+    public static Vec3d fromPitchYawVector(Vec2f p_189984_0_)
     {
-        return func_189986_a(p_189984_0_.field_189982_i, p_189984_0_.field_189983_j);
+        return fromPitchYawDegrees(p_189984_0_.x, p_189984_0_.y);
     }
 
-    public static Vec3d func_189986_a(float p_189986_0_, float p_189986_1_)
-    {
-        float f = MathHelper.cos(-p_189986_1_ * 0.017453292F - (float)Math.PI);
-        float f1 = MathHelper.sin(-p_189986_1_ * 0.017453292F - (float)Math.PI);
-        float f2 = -MathHelper.cos(-p_189986_0_ * 0.017453292F);
-        float f3 = MathHelper.sin(-p_189986_0_ * 0.017453292F);
+    public static Vec3d fromPitchYawDegrees(float pitch, float yaw)
+    { 
+        float f = MathHelper.cos(-yaw * 0.017453292F - (float)Math.PI);
+        float f1 = MathHelper.sin(-yaw * 0.017453292F - (float)Math.PI);
+        float f2 = -MathHelper.cos(-pitch * 0.017453292F);
+        float f3 = MathHelper.sin(-pitch * 0.017453292F);
         return new Vec3d((double)(f1 * f2), (double)f3, (double)(f * f2));
     }
 }
